server:
  port: 9000

# configure name of the service
spring:
  application:
    name: EVENT-SERVICE
  cloud:
    circuitbreaker:
      resilience4j:
        enabled: true

eureka:
  instance:
    hostname: localhost
  client:
    fetch-registry: true
    register-with-eureka: true #default is also true # client discovery
    service-url:
      defaultZone: http://localhost:8761/eureka

# Actuator config
management.endpoints.web.exposure.include: '*'
management.endpoint.health.show-details: always
management.health.diskspace.enabled: false
management.health.circuitbreakers.enabled: true
management.health.ratelimiters.enabled: false

info:
  name: ${spring.application.name}
  description: resilience4j demo
  environment: ${spring.profiles.active}
  version: 0.0.1


# resilience 4j config
# REF docs : https://resilience4j.readme.io/docs/circuitbreaker
# https://github.com/resilience4j/resilience4j-spring-boot3-demo
resilience4j.circuitbreaker:
  configs:
    default:
      registerHealthIndicator: true
      slidingWindowSize: 10
      minimumNumberOfCalls: 5
      permittedNumberOfCallsInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true
      waitDurationInOpenState: 5s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10
    shared:
      slidingWindowSize: 100
      permittedNumberOfCallsInHalfOpenState: 30
      waitDurationInOpenState: 1s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10
  instances:
    # eventParticipantCircuitBreaker from the  @CircuitBreaker(name = "eventParticipantCircuitBreaker", ...)
    eventParticipantCircuitBreaker:
      registerHealthIndicator: true
      slidingWindowSize: 10
      minimumNumberOfCalls: 10
      permittedNumberOfCallsInHalfOpenState: 3
      waitDurationInOpenState: 5s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10

# Retry configuration, such as requesting n no of times with certain duration
resilience4j:
  retry:
    maxAttempts: 3
    waitDuration: 100 #time in ms
resilience4j:retry:
  configs:
    default:
      # only three requests in 100ms
      maxAttempts: 3
      waitDuration: 100 #time in ms
      retryExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.util.concurrent.TimeoutException
        - java.io.IOException
  instances:
    eventParticipantRetryCircuitBreaker:
      baseConfig: default

# Rate limiting to the resource
resilience4j.ratelimiter:
  instances:
    eventParticipantRateLimiterCircuitBreaker:
      limitRefreshPeriod: 2s #default is 500ms
      limitForPeriod: 2 # 2 request at 2s
      timeoutDuration: 0s

# Time limiter, how long a resource can take to execute.
resilience4j.timelimiter:
  configs:
    default:
      cancelRunningFuture: false
      timeoutDuration: 2s # time to complete is 2s, else fallback
  instances:
    eventParticipantTimeLimiterCircuitBreaker:
      baseConfig: default